#include <stdio.h>
#include <stdlib.h>

// Definition of a binary tree node
/*Step 1: Define the Node Structure
First, we define the structure of a node in the binary tree. Each node contains:

data: an integer value.
left: a pointer to the left child node.
right: a pointer to the right child node.*/
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
/*Step 2: Create a New Node
Next, we write a function createNode to create and
 initialize a new node with a given value. This function:
Allocates memory for a new node.
Sets the data field to the given value.
Initializes left and right pointers to NULL.*/
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function for in-order traversal
/*Step 3: In-order Traversal
In-order traversal visits the nodes in the following order:

Traverse the left subtree.
Visit the root node.
Traverse the right subtree.*/
void inOrderTraversal(struct Node* node) {
    if (node == NULL)
        return;

    inOrderTraversal(node->left);
    printf("%d ", node->data);
    inOrderTraversal(node->right);
}

// Function for pre-order traversal
/*Step 4: Pre-order Traversal
Pre-order traversal visits the nodes in the following order:

Visit the root node.
Traverse the left subtree.
Traverse the right subtree.
*/
void preOrderTraversal(struct Node* node) {
    if (node == NULL)
        return;

    printf("%d ", node->data);
    preOrderTraversal(node->left);
    preOrderTraversal(node->right);
}

// Function for post-order traversal
/*Step 5: Post-order Traversal
Post-order traversal visits the nodes in the following order:

Traverse the left subtree.
Traverse the right subtree.
Visit the root node.*/
void postOrderTraversal(struct Node* node) {
    if (node == NULL)
        return;

    postOrderTraversal(node->left);
    postOrderTraversal(node->right);
    printf("%d ", node->data);
}

// Main function to demonstrate the tree and traversals
/*In the main function, we:

Create a sample binary tree with several nodes.
Perform in-order, pre-order, and post-order traversals on the tree.
Print the traversal results.*/
int main() {
    // Create nodes
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    // Perform traversals
    printf("In-order Traversal: ");
    inOrderTraversal(root);
    printf("\n");

    printf("Pre-order Traversal: ");
    preOrderTraversal(root);
    printf("\n");

    printf("Post-order Traversal: ");
    postOrderTraversal(root);
    printf("\n");

    return 0;
}
/*Detailed Steps in the Main Function:
Create Root and Child Nodes:

Create the root node with data 1.
Create left and right children of the root node with data 2 and 3, respectively.
Create left and right children for node 2 (with data 4 and 5) and for node 3 (with data 6 and 7).
In-order Traversal:

Starts from the root and prints nodes in the order: 4, 2, 5, 1, 6, 3, 7.
Pre-order Traversal:

Starts from the root and prints nodes in the order: 1, 2, 4, 5, 3, 6, 7.
Post-order Traversal:

Starts from the root and prints nodes in the order: 4, 5, 2, 6, 7, 3, 1.
Each traversal function is called with the root node, and it recursively processes the entire tree structure as per the traversal rules.
 The results are printed to the console.*/
/*
